/*
Link Attribution Server SDK

This is the api used by link attribution

API version: 0.100000
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package linkattribution

import (
	"encoding/json"
)

// checks if the RequestsLinkRedirects type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestsLinkRedirects{}

// RequestsLinkRedirects struct for RequestsLinkRedirects
type RequestsLinkRedirects struct {
	AndroidRedirect NullableString `json:"androidRedirect,omitempty"`
	DesktopRedirect NullableString `json:"desktopRedirect,omitempty"`
	IosRedirect NullableString `json:"iosRedirect,omitempty"`
	WebOnly *bool `json:"webOnly,omitempty"`
}

// NewRequestsLinkRedirects instantiates a new RequestsLinkRedirects object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestsLinkRedirects() *RequestsLinkRedirects {
	this := RequestsLinkRedirects{}
	return &this
}

// NewRequestsLinkRedirectsWithDefaults instantiates a new RequestsLinkRedirects object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestsLinkRedirectsWithDefaults() *RequestsLinkRedirects {
	this := RequestsLinkRedirects{}
	return &this
}

// GetAndroidRedirect returns the AndroidRedirect field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RequestsLinkRedirects) GetAndroidRedirect() string {
	if o == nil || IsNil(o.AndroidRedirect.Get()) {
		var ret string
		return ret
	}
	return *o.AndroidRedirect.Get()
}

// GetAndroidRedirectOk returns a tuple with the AndroidRedirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RequestsLinkRedirects) GetAndroidRedirectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AndroidRedirect.Get(), o.AndroidRedirect.IsSet()
}

// HasAndroidRedirect returns a boolean if a field has been set.
func (o *RequestsLinkRedirects) HasAndroidRedirect() bool {
	if o != nil && o.AndroidRedirect.IsSet() {
		return true
	}

	return false
}

// SetAndroidRedirect gets a reference to the given NullableString and assigns it to the AndroidRedirect field.
func (o *RequestsLinkRedirects) SetAndroidRedirect(v string) {
	o.AndroidRedirect.Set(&v)
}
// SetAndroidRedirectNil sets the value for AndroidRedirect to be an explicit nil
func (o *RequestsLinkRedirects) SetAndroidRedirectNil() {
	o.AndroidRedirect.Set(nil)
}

// UnsetAndroidRedirect ensures that no value is present for AndroidRedirect, not even an explicit nil
func (o *RequestsLinkRedirects) UnsetAndroidRedirect() {
	o.AndroidRedirect.Unset()
}

// GetDesktopRedirect returns the DesktopRedirect field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RequestsLinkRedirects) GetDesktopRedirect() string {
	if o == nil || IsNil(o.DesktopRedirect.Get()) {
		var ret string
		return ret
	}
	return *o.DesktopRedirect.Get()
}

// GetDesktopRedirectOk returns a tuple with the DesktopRedirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RequestsLinkRedirects) GetDesktopRedirectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DesktopRedirect.Get(), o.DesktopRedirect.IsSet()
}

// HasDesktopRedirect returns a boolean if a field has been set.
func (o *RequestsLinkRedirects) HasDesktopRedirect() bool {
	if o != nil && o.DesktopRedirect.IsSet() {
		return true
	}

	return false
}

// SetDesktopRedirect gets a reference to the given NullableString and assigns it to the DesktopRedirect field.
func (o *RequestsLinkRedirects) SetDesktopRedirect(v string) {
	o.DesktopRedirect.Set(&v)
}
// SetDesktopRedirectNil sets the value for DesktopRedirect to be an explicit nil
func (o *RequestsLinkRedirects) SetDesktopRedirectNil() {
	o.DesktopRedirect.Set(nil)
}

// UnsetDesktopRedirect ensures that no value is present for DesktopRedirect, not even an explicit nil
func (o *RequestsLinkRedirects) UnsetDesktopRedirect() {
	o.DesktopRedirect.Unset()
}

// GetIosRedirect returns the IosRedirect field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RequestsLinkRedirects) GetIosRedirect() string {
	if o == nil || IsNil(o.IosRedirect.Get()) {
		var ret string
		return ret
	}
	return *o.IosRedirect.Get()
}

// GetIosRedirectOk returns a tuple with the IosRedirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RequestsLinkRedirects) GetIosRedirectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IosRedirect.Get(), o.IosRedirect.IsSet()
}

// HasIosRedirect returns a boolean if a field has been set.
func (o *RequestsLinkRedirects) HasIosRedirect() bool {
	if o != nil && o.IosRedirect.IsSet() {
		return true
	}

	return false
}

// SetIosRedirect gets a reference to the given NullableString and assigns it to the IosRedirect field.
func (o *RequestsLinkRedirects) SetIosRedirect(v string) {
	o.IosRedirect.Set(&v)
}
// SetIosRedirectNil sets the value for IosRedirect to be an explicit nil
func (o *RequestsLinkRedirects) SetIosRedirectNil() {
	o.IosRedirect.Set(nil)
}

// UnsetIosRedirect ensures that no value is present for IosRedirect, not even an explicit nil
func (o *RequestsLinkRedirects) UnsetIosRedirect() {
	o.IosRedirect.Unset()
}

// GetWebOnly returns the WebOnly field value if set, zero value otherwise.
func (o *RequestsLinkRedirects) GetWebOnly() bool {
	if o == nil || IsNil(o.WebOnly) {
		var ret bool
		return ret
	}
	return *o.WebOnly
}

// GetWebOnlyOk returns a tuple with the WebOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestsLinkRedirects) GetWebOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.WebOnly) {
		return nil, false
	}
	return o.WebOnly, true
}

// HasWebOnly returns a boolean if a field has been set.
func (o *RequestsLinkRedirects) HasWebOnly() bool {
	if o != nil && !IsNil(o.WebOnly) {
		return true
	}

	return false
}

// SetWebOnly gets a reference to the given bool and assigns it to the WebOnly field.
func (o *RequestsLinkRedirects) SetWebOnly(v bool) {
	o.WebOnly = &v
}

func (o RequestsLinkRedirects) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestsLinkRedirects) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AndroidRedirect.IsSet() {
		toSerialize["androidRedirect"] = o.AndroidRedirect.Get()
	}
	if o.DesktopRedirect.IsSet() {
		toSerialize["desktopRedirect"] = o.DesktopRedirect.Get()
	}
	if o.IosRedirect.IsSet() {
		toSerialize["iosRedirect"] = o.IosRedirect.Get()
	}
	if !IsNil(o.WebOnly) {
		toSerialize["webOnly"] = o.WebOnly
	}
	return toSerialize, nil
}

type NullableRequestsLinkRedirects struct {
	value *RequestsLinkRedirects
	isSet bool
}

func (v NullableRequestsLinkRedirects) Get() *RequestsLinkRedirects {
	return v.value
}

func (v *NullableRequestsLinkRedirects) Set(val *RequestsLinkRedirects) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestsLinkRedirects) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestsLinkRedirects) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestsLinkRedirects(val *RequestsLinkRedirects) *NullableRequestsLinkRedirects {
	return &NullableRequestsLinkRedirects{value: val, isSet: true}
}

func (v NullableRequestsLinkRedirects) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestsLinkRedirects) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


